openapi: 3.0.0
info:
  description: "スキーマ"
  version: "1.0.0"
  title: "Anti-Pattern Portal Site API schema"
  contact:
    name: "Anti-Pattern"
servers:
  - url: "http://localhost:80/api/v1"
    description: local
tags:
  - name: "Users"
    description: ユーザーに関する API です。
security:
  - Bearer: []
paths:
  /init:
    get:
      tags:
        - Init
      operationId: Initialize
      summary: サインイン
      description: サインインに成功したら、JWTトークンをもとにユーザーIDを受け取ります
      responses:
        200:
          description: サインインに成功しました
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Init"
        401:
          description: Unauthorized
        500:
          description: Internal Server Error
  /users:
    get:
      tags:
        - Users
      operationId: GetUsers
      description: 全ユーザー情報取得
      summary: 全ユーザー情報取得
      responses:
        200:
          description: ユーザー情報取得に成功しました
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
        500:
          description: Internal Server Error
    post:
      tags:
        - Users
      operationId: CreateUser
      description: ユーザー情報作成
      summary: ユーザー情報作成
      requestBody:
        $ref: "#/components/requestBodies/CreateUserBody"
      responses:
        201:
          description: ユーザーの作成に成功しました
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        422:
          description: Unprocessable Entity
        500:
          description: Internal Server Error
  /users/{user_id}:
    get:
      tags:
        - Users
      operationId: GetUser
      summary: 指定したユーザーIDの情報を取得
      description: ユーザーIDをもとにユーザー情報を受け取ります
      parameters:
        - $ref: "#/components/parameters/UserId"
      responses:
        200:
          description: ユーザーの取得に成功しました
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        404:
          description: Not Found
        500:
          description: Internal Server Error
    put:
      tags:
        - Users
      operationId: UpdateUser
      summary: 指定したユーザーの情報を更新
      description: IDを条件にユーザー情報を更新します
      parameters:
        - $ref: "#/components/parameters/UserId"
      requestBody:
        $ref: "#/components/requestBodies/UpdateUserBody"
      responses:
        200:
          description: ユーザー情報が更新されました
        404:
          description: Not Found
        422:
          description: Unprocessable Entity
        500:
          description: Internal Server Error
components:
  parameters:
    UserId:
      in: path
      name: user_id
      schema:
        type: string
        format: uuid
        x-go-type: uint64
        example: d74e0020-de60-11ec-9d64-0242ac120002
      required: true
  requestBodies:
    CreateUserBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserProps"
      required: true
    UpdateUserBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserProps"
      required: true
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      description: Credentials or access token for API
  schemas:
    Init:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
          example: d74e0020-de60-11ec-9d64-0242ac120002
          readOnly: true
      required:
        - user_id
    Users:
      type: object
      title: 全ユーザー情報
      properties:
        users:
          type: array
          items:
            $ref: "#/components/schemas/User"
      required:
        - users
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d74e0020-de60-11ec-9d64-0242ac120002
          readOnly: true
        email:
          $ref: "#/components/schemas/Email"
        last_name:
          $ref: "#/components/schemas/LastName"
        first_name:
          $ref: "#/components/schemas/FirstName"
      required:
        - id
        - email
        - last_name
        - first_name
    UserProps:
      type: object
      properties:
        email:
          $ref: "#/components/schemas/Email"
        last_name:
          $ref: "#/components/schemas/LastName"
        first_name:
          $ref: "#/components/schemas/FirstName"
      required:
        - email
        - last_name
        - first_name
    Email:
      type: string
      example: test@example.com
    LastName:
      type: string
      example: 田中
    FirstName:
      type: string
      example: 太郎
