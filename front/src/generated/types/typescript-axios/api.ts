/* tslint:disable */
/* eslint-disable */
/**
 * Anti-Pattern Portal Site API schema
 * スキーマ
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Init
 */
export interface Init {
    /**
     * 
     * @type {string}
     * @memberof Init
     */
    'user_id': string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'last_name': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'first_name': string;
}
/**
 * 
 * @export
 * @interface UserProps
 */
export interface UserProps {
    /**
     * 
     * @type {string}
     * @memberof UserProps
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserProps
     */
    'last_name': string;
    /**
     * 
     * @type {string}
     * @memberof UserProps
     */
    'first_name': string;
}
/**
 * 
 * @export
 * @interface Users
 */
export interface Users {
    /**
     * 
     * @type {Array<User>}
     * @memberof Users
     */
    'users': Array<User>;
}

/**
 * InitApi - axios parameter creator
 * @export
 */
export const InitApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * サインインに成功したら、JWTトークンをもとにユーザーIDを受け取ります
         * @summary サインイン
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initialize: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/init`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InitApi - functional programming interface
 * @export
 */
export const InitApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InitApiAxiosParamCreator(configuration)
    return {
        /**
         * サインインに成功したら、JWTトークンをもとにユーザーIDを受け取ります
         * @summary サインイン
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async initialize(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Init>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.initialize(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InitApi - factory interface
 * @export
 */
export const InitApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InitApiFp(configuration)
    return {
        /**
         * サインインに成功したら、JWTトークンをもとにユーザーIDを受け取ります
         * @summary サインイン
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initialize(options?: any): AxiosPromise<Init> {
            return localVarFp.initialize(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InitApi - object-oriented interface
 * @export
 * @class InitApi
 * @extends {BaseAPI}
 */
export class InitApi extends BaseAPI {
    /**
     * サインインに成功したら、JWTトークンをもとにユーザーIDを受け取ります
     * @summary サインイン
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InitApi
     */
    public initialize(options?: AxiosRequestConfig) {
        return InitApiFp(this.configuration).initialize(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ユーザー情報作成
         * @summary ユーザー情報作成
         * @param {UserProps} userProps 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: async (userProps: UserProps, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userProps' is not null or undefined
            assertParamExists('createUser', 'userProps', userProps)
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userProps, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザーIDをもとにユーザー情報を受け取ります
         * @summary 指定したユーザーIDの情報を取得
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUser', 'userId', userId)
            const localVarPath = `/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 全ユーザー情報取得
         * @summary 全ユーザー情報取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IDを条件にユーザー情報を更新します
         * @summary 指定したユーザーの情報を更新
         * @param {string} userId 
         * @param {UserProps} userProps 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (userId: string, userProps: UserProps, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateUser', 'userId', userId)
            // verify required parameter 'userProps' is not null or undefined
            assertParamExists('updateUser', 'userProps', userProps)
            const localVarPath = `/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userProps, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * ユーザー情報作成
         * @summary ユーザー情報作成
         * @param {UserProps} userProps 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUser(userProps: UserProps, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(userProps, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ユーザーIDをもとにユーザー情報を受け取ります
         * @summary 指定したユーザーIDの情報を取得
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 全ユーザー情報取得
         * @summary 全ユーザー情報取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Users>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * IDを条件にユーザー情報を更新します
         * @summary 指定したユーザーの情報を更新
         * @param {string} userId 
         * @param {UserProps} userProps 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(userId: string, userProps: UserProps, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(userId, userProps, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * ユーザー情報作成
         * @summary ユーザー情報作成
         * @param {UserProps} userProps 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(userProps: UserProps, options?: any): AxiosPromise<User> {
            return localVarFp.createUser(userProps, options).then((request) => request(axios, basePath));
        },
        /**
         * ユーザーIDをもとにユーザー情報を受け取ります
         * @summary 指定したユーザーIDの情報を取得
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(userId: string, options?: any): AxiosPromise<User> {
            return localVarFp.getUser(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 全ユーザー情報取得
         * @summary 全ユーザー情報取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(options?: any): AxiosPromise<Users> {
            return localVarFp.getUsers(options).then((request) => request(axios, basePath));
        },
        /**
         * IDを条件にユーザー情報を更新します
         * @summary 指定したユーザーの情報を更新
         * @param {string} userId 
         * @param {UserProps} userProps 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(userId: string, userProps: UserProps, options?: any): AxiosPromise<void> {
            return localVarFp.updateUser(userId, userProps, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * ユーザー情報作成
     * @summary ユーザー情報作成
     * @param {UserProps} userProps 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public createUser(userProps: UserProps, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).createUser(userProps, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザーIDをもとにユーザー情報を受け取ります
     * @summary 指定したユーザーIDの情報を取得
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUser(userId: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUser(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 全ユーザー情報取得
     * @summary 全ユーザー情報取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUsers(options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUsers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * IDを条件にユーザー情報を更新します
     * @summary 指定したユーザーの情報を更新
     * @param {string} userId 
     * @param {UserProps} userProps 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateUser(userId: string, userProps: UserProps, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).updateUser(userId, userProps, options).then((request) => request(this.axios, this.basePath));
    }
}


